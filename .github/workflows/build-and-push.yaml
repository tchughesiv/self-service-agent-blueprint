name: Build and push images

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

env:
 REGISTRY: quay.io/ecosystem-appeng

jobs:
  build-and-push:
    if: github.repository_owner == 'RHEcosystemAppEng'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from Makefile
        id: version
        run: |
          BASE_VERSION=$(make version)
          VERSION_WITH_COMMIT="${BASE_VERSION}-${{ github.sha }}"
          echo "base_version=${BASE_VERSION}" >> $GITHUB_OUTPUT
          echo "version_with_commit=${VERSION_WITH_COMMIT}" >> $GITHUB_OUTPUT

          # Build versions list - add latest only for main branch
          VERSIONS="${BASE_VERSION} ${VERSION_WITH_COMMIT}"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSIONS="${VERSIONS} latest"
            echo "Adding 'latest' tag for main branch"
          else
            echo "Skipping 'latest' tag for non-main branch: ${{ github.ref_name }}"
          fi

          echo "versions=${VERSIONS}" >> $GITHUB_OUTPUT
          echo "Base version: ${BASE_VERSION}"
          echo "Version with commit: ${VERSION_WITH_COMMIT}"
          echo "All versions: ${VERSIONS}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.6.17"
          python-version: "3.12"

      - name: Build all Images
        run: |
          IFS=' ' read -ra VERSIONS <<< "${{ steps.version.outputs.versions }}"
          for version in "${VERSIONS[@]}"; do
            echo "Building images with version: ${version}"
            VERSION="${version}" make build-all-images
          done

      - name: Push all Images
        run: |
          IFS=' ' read -ra VERSIONS <<< "${{ steps.version.outputs.versions }}"
          for version in "${VERSIONS[@]}"; do
            echo "Pushing images with version: ${version}"
            VERSION="${version}" make push-all-images
          done
