{{- if .Values.requestManagement.enabled }}
ðŸš€ Self-Service Agent with Request Management Layer has been deployed!

## Core Services
- Asset Manager: Manages agents and knowledge bases
- Llama Stack: AI agent runtime with PostgreSQL persistence
- MCP Servers: Employee info and ServiceNow integrations

{{- if and .Values.requestManagement.serviceMesh.enabled (eq .Values.requestManagement.externalAccess.method "istio") .Values.requestManagement.istio.gateway.enabled }}
## Request Management Layer with Istio Gateway
- Request Manager: Multi-integration request handling with Istio security
- Agent Service: CloudEvent-driven agent processing
- Integration Dispatcher: Multi-tenant delivery to Slack, Email, SMS, Webhooks
- Istio Gateway: Advanced traffic management with JWT authentication and mTLS

### Access URLs (via Istio Gateway):
{{- range .Values.requestManagement.istio.gateway.hosts }}
- http://{{ . }}/api/v1/requests/web    (Web requests)
- http://{{ . }}/api/v1/requests/slack  (Slack webhooks)
- http://{{ . }}/api/v1/requests/tool   (Tool integrations)
- http://{{ . }}/api/v1/users/{user_id}/integrations (User integration management)
- http://{{ . }}/api/v1/users/{user_id}/deliveries   (Delivery history)
- http://{{ . }}/health                 (Health check)
{{- end }}
{{- else if .Values.requestManagement.serviceMesh.enabled }}
## Request Management Layer with OpenShift Route
- Request Manager: Multi-integration request handling
- Agent Service: CloudEvent-driven agent processing
- Integration Dispatcher: Multi-tenant delivery to Slack, Email, SMS, Webhooks

### Access URLs (via OpenShift Route):
- External route will be auto-generated by OpenShift
- Check: kubectl get routes -n {{ .Release.Namespace }}

### Security Configuration:
- JWT Authentication: Configured for {{ len .Values.security.jwt.issuers }} issuer(s)
- API Keys: Configured for tool integrations (update via secrets)
- Slack Signature: Configured for webhook verification
- mTLS: Enabled for service-to-service communication
{{- else }}
## Request Management Layer (Standard Deployments)
- Request Manager: Multi-integration request handling  
- Agent Service: CloudEvent-driven agent processing
- Integration Dispatcher: Multi-tenant delivery to Slack, Email, SMS, Webhooks

### Internal Access:
- Request Manager: http://{{ include "self-service-agent.fullname" . }}-request-manager.{{ .Release.Namespace }}.svc.cluster.local
- Agent Service: http://{{ include "self-service-agent.fullname" . }}-agent-service.{{ .Release.Namespace }}.svc.cluster.local
- Integration Dispatcher: http://{{ include "self-service-agent.fullname" . }}-integration-dispatcher.{{ .Release.Namespace }}.svc.cluster.local
{{- end }}

{{- if .Values.requestManagement.knative.enabled }}
### Event Infrastructure:
- Knative Broker: {{ .Values.requestManagement.knative.broker.name }}
- Event Triggers: Configured for request routing and response handling
{{- end }}

## Database:
- PostgreSQL: pgvector.{{ .Release.Namespace }}.svc.cluster.local:5432
- Databases: llama_agents, llama_responses, request_sessions

## Getting Started:

1. **Configure Security Secrets** (if using Service Mesh):
   ```bash
   # Update API keys
   kubectl patch secret api-keys -n {{ .Release.Namespace }} --patch='{"data":{"snow-integration":"<base64-encoded-key>"}}'
   
   # Update Slack signing secret
   kubectl patch secret slack-signing-secret -n {{ .Release.Namespace }} --patch='{"data":{"signing-secret":"<base64-encoded-secret>"}}'
   
   # Update Integration Dispatcher secrets
   kubectl patch secret integration-dispatcher-secrets -n {{ .Release.Namespace }} --patch='{"data":{"slack-bot-token":"<base64-encoded-token>","smtp-host":"<base64-encoded-host>","smtp-username":"<base64-encoded-user>","smtp-password":"<base64-encoded-pass>"}}'
   ```

2. **Test the Health Endpoint**:
   ```bash
   {{- if and .Values.requestManagement.serviceMesh.enabled (eq .Values.requestManagement.externalAccess.method "istio") .Values.requestManagement.istio.gateway.enabled }}
   # Get the Istio Gateway route
   kubectl get routes -n istio-system | grep istio-gateway
   # Then curl the health endpoint via the gateway
   {{- else if and .Values.requestManagement.serviceMesh.enabled (eq .Values.requestManagement.externalAccess.method "route") }}
   # Get the OpenShift route
   kubectl get routes -n {{ .Release.Namespace }}
   # Then curl the health endpoint via the route
   {{- else }}
   kubectl port-forward svc/{{ include "self-service-agent.fullname" . }}-request-manager-00001-private 8080:80 -n {{ .Release.Namespace }}
   curl http://localhost:8080/health
   {{- end }}
   ```

3. **Register Agents and Knowledge Bases**:
   ```bash
   # Port forward to asset manager
   kubectl port-forward deployment/{{ include "self-service-agent.fullname" . }}-asset-manager 8080:8080 -n {{ .Release.Namespace }}
   
   # In another terminal, register assets
   cd asset-manager && uv run script/register_assets.py
   ```

4. **Monitor with Service Mesh** (if enabled):
   - Kiali: Access via OpenShift Service Mesh console
   - Jaeger: Distributed tracing for request flows
   - Grafana: Metrics and dashboards

## Integration Examples:

### Web Request:
```bash
# Get the external route first:
ROUTE_URL=$(kubectl get routes -n {{ .Release.Namespace }} -o jsonpath='{.items[0].spec.host}')

curl -X POST http://$ROUTE_URL/api/v1/requests/web \
  -H "Content-Type: application/json" \
  -d '{"user_id": "user123", "content": "Help with laptop refresh"}'
```

### Tool Request:
```bash
curl -X POST http://$ROUTE_URL/api/v1/requests/tool \
  -H "X-API-Key: <api-key>" \
  -H "Content-Type: application/json" \
  -d '{"user_id": "system", "content": "Automated request", "tool_id": "snow-integration", "trigger_event": "asset.refresh"}'
```

### Integration Management:
```bash
# Configure user integrations
curl -X POST http://$ROUTE_URL/api/v1/users/john.doe/integrations \
  -H "Content-Type: application/json" \
  -d '{"integration_type": "slack", "enabled": true, "config": {"channel_id": "C1234567890", "thread_replies": true}}'

# Get delivery history
curl http://$ROUTE_URL/api/v1/users/john.doe/deliveries
```

## Alternative: Port-Forward Access (Development/Testing)

For development or when external ingress is not available, use port-forwarding:

### Quick Setup:
```bash
# Start port-forwards (in separate terminals):
kubectl port-forward svc/{{ include "self-service-agent.fullname" . }}-request-manager-00001-private 8080:80 -n {{ .Release.Namespace }}
kubectl port-forward svc/{{ include "self-service-agent.fullname" . }}-agent-service-00001-private 8081:80 -n {{ .Release.Namespace }}
kubectl port-forward deployment/{{ include "self-service-agent.fullname" . }}-asset-manager 8082:8080 -n {{ .Release.Namespace }}
kubectl port-forward svc/{{ include "self-service-agent.fullname" . }}-integration-dispatcher-00001-private 8083:80 -n {{ .Release.Namespace }}

# Test health endpoints:
curl http://localhost:8080/health  # Request Manager
curl http://localhost:8081/health  # Agent Service  
curl http://localhost:8082/health  # Asset Manager
curl http://localhost:8083/health  # Integration Dispatcher
```

### Port-Forward Examples:
```bash
# Web Request:
curl -X POST http://localhost:8080/api/v1/requests/web \
  -H "Content-Type: application/json" \
  -d '{"user_id": "user123", "content": "Help with laptop refresh"}'

# Integration Management:
curl -X POST http://localhost:8083/api/v1/users/john.doe/integrations \
  -H "Content-Type: application/json" \
  -d '{"integration_type": "slack", "enabled": true, "config": {"channel_id": "C1234567890"}}'
```

ðŸ“– **Port-Forward Documentation:**
- Quick Start: PORT_FORWARD_QUICK_START.md
- Complete Guide: GETTING_STARTED_PORT_FORWARD.md  
- Testing Procedures: PORT_FORWARD_TESTING.md

For detailed documentation, see: REQUEST_MANAGEMENT.md
{{- end }}

