{{- if and .Values.requestManagement.enabled (not .Values.requestManagement.useKnativeServices) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "self-service-agent.fullname" . }}-agent-service
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "self-service-agent.labels" . | nindent 4 }}
    app: {{ include "self-service-agent.fullname" . }}-agent-service
    component: agent-service
spec:
  replicas: {{ .Values.requestManagement.agentService.replicas | default 2 }}
  selector:
    matchLabels:
      {{- include "self-service-agent.selectorLabels" . | nindent 6 }}
      app: {{ include "self-service-agent.fullname" . }}-agent-service
      component: agent-service
  template:
    metadata:
      labels:
        {{- include "self-service-agent.labels" . | nindent 8 }}
        app: {{ include "self-service-agent.fullname" . }}-agent-service
        component: agent-service
        version: v1
      annotations:
        # Service Mesh sidecar configuration
        sidecar.istio.io/inject: "{{ .Values.requestManagement.agentService.istio.sidecarInject }}"
        sidecar.istio.io/proxyCPU: "10m"
        sidecar.istio.io/proxyMemory: "64Mi"
        # Traffic configuration - allow Knative eventing
        traffic.sidecar.istio.io/includeInboundPorts: "8080"
        traffic.sidecar.istio.io/excludeOutboundPorts: "9092"  # Kafka
    spec:
      serviceAccountName: {{ include "self-service-agent.serviceAccountName" . }}
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: agent-service
        image: {{ .Values.image.agentService }}:{{ .Values.image.tag | default .Chart.AppVersion }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 8080
          protocol: TCP
          name: http
        env:
        # Database configuration
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: pgvector
              key: host
        - name: POSTGRES_PORT
          valueFrom:
            secretKeyRef:
              name: pgvector
              key: port
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: pgvector
              key: dbname
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: pgvector
              key: user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pgvector
              key: password
        # Common environment variables
        - name: LOG_LEVEL
          value: "INFO"
        - name: SQL_DEBUG
          value: "false"
        - name: EXPECTED_MIGRATION_VERSION
          value: {{ .Values.database.expectedMigrationVersion | default "001" | quote }}
        - name: BROKER_URL
          value: "{{ .Values.requestManagement.knative.broker.url }}/{{ .Release.Namespace }}/{{ .Values.requestManagement.knative.broker.name }}"
        - name: PORT
          value: "8080"
        - name: HOST
          value: "0.0.0.0"
        # Agent Service specific environment variables
        - name: LLAMA_STACK_URL
          value: {{ .Values.llama_stack_url | quote }}
        - name: DEFAULT_AGENT_ID
          value: "routing-agent"
        - name: AGENT_TIMEOUT
          value: "120"
        resources:
          requests:
            memory: {{ .Values.requestManagement.agentService.resources.requests.memory }}
            cpu: {{ .Values.requestManagement.agentService.resources.requests.cpu }}
          limits:
            memory: {{ .Values.requestManagement.agentService.resources.limits.memory }}
            cpu: {{ .Values.requestManagement.agentService.resources.limits.cpu }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 60  # Longer startup time for agent initialization
      restartPolicy: Always
      terminationGracePeriodSeconds: 60  # Longer grace period for agent processing
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "self-service-agent.fullname" . }}-agent-service
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "self-service-agent.labels" . | nindent 4 }}
    app: {{ include "self-service-agent.fullname" . }}-agent-service
    component: agent-service
spec:
  type: ClusterIP
  selector:
    {{- include "self-service-agent.selectorLabels" . | nindent 4 }}
    app: {{ include "self-service-agent.fullname" . }}-agent-service
    component: agent-service
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
---
{{- if .Values.requestManagement.agentService.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "self-service-agent.fullname" . }}-agent-service
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "self-service-agent.labels" . | nindent 4 }}
    app: {{ include "self-service-agent.fullname" . }}-agent-service
    component: agent-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "self-service-agent.fullname" . }}-agent-service
  minReplicas: {{ .Values.requestManagement.agentService.autoscaling.minReplicas | default 1 }}
  maxReplicas: {{ .Values.requestManagement.agentService.autoscaling.maxReplicas | default 20 }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ .Values.requestManagement.agentService.autoscaling.targetCPUUtilization | default 70 }}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{ .Values.requestManagement.agentService.autoscaling.targetMemoryUtilization | default 80 }}
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # Wait 5 minutes before scaling down
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30   # Quick scale up for agent processing
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max
{{- end }}
{{- end }}
