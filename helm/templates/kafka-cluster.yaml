{{- if and .Values.requestManagement.enabled .Values.requestManagement.knative.eventing.enabled }}
---
# Using Red Hat AMQ Streams (Streams for Apache Kafka) v3.0.0-13
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: {{ .Values.requestManagement.kafka.name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    strimzi.io/node-pools: enabled
    strimzi.io/kraft: enabled
  labels:
    {{- include "self-service-agent.labels" . | nindent 4 }}
spec:
  kafka:
    version: 3.9.0
    listeners:
    - name: plain
      port: 9092
      type: internal
      tls: false
    config:
      default.replication.factor: {{ .Values.requestManagement.kafka.config.defaultReplicationFactor }}
      min.insync.replicas: {{ .Values.requestManagement.kafka.config.minInSyncReplicas }}
      offsets.topic.replication.factor: {{ .Values.requestManagement.kafka.config.offsetsTopicReplicationFactor }}
      transaction.state.log.min.isr: {{ .Values.requestManagement.kafka.config.transactionStateLogMinIsr }}
      transaction.state.log.replication.factor: {{ .Values.requestManagement.kafka.config.transactionStateLogReplicationFactor }}
      auto.create.topics.enable: false
    # Resources moved to KafkaNodePool
  entityOperator:
    topicOperator:
      resources:
        requests:
          memory: {{ .Values.requestManagement.kafka.entityOperator.topicOperator.resources.requests.memory }}
          cpu: {{ .Values.requestManagement.kafka.entityOperator.topicOperator.resources.requests.cpu }}
        limits:
          memory: {{ .Values.requestManagement.kafka.entityOperator.topicOperator.resources.limits.memory }}
          cpu: {{ .Values.requestManagement.kafka.entityOperator.topicOperator.resources.limits.cpu }}
    userOperator:
      resources:
        requests:
          memory: {{ .Values.requestManagement.kafka.entityOperator.userOperator.resources.requests.memory }}
          cpu: {{ .Values.requestManagement.kafka.entityOperator.userOperator.resources.requests.cpu }}
        limits:
          memory: {{ .Values.requestManagement.kafka.entityOperator.userOperator.resources.limits.memory }}
          cpu: {{ .Values.requestManagement.kafka.entityOperator.userOperator.resources.limits.cpu }}
---
# KafkaNodePool for managing Kafka broker storage and resources
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: {{ .Values.requestManagement.kafka.name }}-pool
  namespace: {{ .Release.Namespace }}
  labels:
    strimzi.io/cluster: {{ .Values.requestManagement.kafka.name }}
    {{- include "self-service-agent.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.requestManagement.kafka.replicas }}
  roles:
    - controller
    - broker
  storage:
    type: {{ .Values.requestManagement.kafka.storage.type }}
    {{- if eq .Values.requestManagement.kafka.storage.type "persistent-claim" }}
    size: {{ .Values.requestManagement.kafka.storage.size }}
    {{- end }}
  resources:
    requests:
      memory: {{ .Values.requestManagement.kafka.resources.requests.memory }}
      cpu: {{ .Values.requestManagement.kafka.resources.requests.cpu }}
    limits:
      memory: {{ .Values.requestManagement.kafka.resources.limits.memory }}
      cpu: {{ .Values.requestManagement.kafka.resources.limits.cpu }}
{{- end }}