{{- if and .Values.requestManagement.enabled .Values.requestManagement.agentService.enabled .Values.requestManagement.useKnativeServices }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "self-service-agent.fullname" . }}-agent-service
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "self-service-agent.labels" . | nindent 4 }}
  annotations:
    security.istio.io/tlsMode: istio
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "self-service-agent.fullname" . }}-agent-service-role
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "self-service-agent.labels" . | nindent 4 }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
  resourceNames: ["pgvector"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "self-service-agent.fullname" . }}-agent-service-binding
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "self-service-agent.labels" . | nindent 4 }}
subjects:
- kind: ServiceAccount
  name: {{ include "self-service-agent.fullname" . }}-agent-service
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ include "self-service-agent.fullname" . }}-agent-service-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: {{ include "self-service-agent.fullname" . }}-agent-service
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "self-service-agent.labels" . | nindent 4 }}
    app: {{ include "self-service-agent.fullname" . }}-agent-service
    version: v1
  annotations:
    # Networking configuration
    {{- if eq .Values.requestManagement.knative.serviceVisibility "cluster-local" }}
    networking.knative.dev/visibility: cluster-local
    {{- end }}
    # Service Mesh integration annotations moved to pod template level
spec:
  template:
    metadata:
      labels:
        {{- include "self-service-agent.labels" . | nindent 8 }}
        app: {{ include "self-service-agent.fullname" . }}-agent-service
        version: v1
      annotations:
        # Auto-scaling configuration
        autoscaling.knative.dev/minScale: {{ .Values.requestManagement.agentService.autoscaling.minScale | quote }}
        autoscaling.knative.dev/maxScale: {{ .Values.requestManagement.agentService.autoscaling.maxScale | quote }}
        autoscaling.knative.dev/target: {{ .Values.requestManagement.agentService.autoscaling.target | quote }}
        # Resource limits
        autoscaling.knative.dev/class: kpa.autoscaling.knative.dev
        autoscaling.knative.dev/metric: concurrency
        # # # Service Mesh sidecar configuration - disabled for Kafka dispatcher connectivity
        # # sidecar.istio.io/inject: "false"
        # # sidecar.istio.io/proxyCPU: "10m"
        # # sidecar.istio.io/proxyMemory: "64Mi"
        # # Traffic configuration for Knative service port
        # traffic.sidecar.istio.io/includeInboundPorts: "8080"
    spec:
      containerConcurrency: 50
      timeoutSeconds: 600  # Longer timeout for agent processing
      serviceAccountName: {{ include "self-service-agent.fullname" . }}-agent-service
      containers:
      - name: agent-service
        image: {{ .Values.image.agentService }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
        - name: LLAMA_STACK_URL
          value: {{ .Values.llama_stack_url | quote }}
        - name: BROKER_URL
          value: "{{ .Values.requestManagement.knative.broker.url }}/{{ .Release.Namespace }}/{{ .Values.requestManagement.knative.broker.name }}"
        - name: DEFAULT_AGENT_ID
          value: "routing-agent"
        - name: AGENT_TIMEOUT
          value: "120"
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: {{ .Values.requestManagement.agentService.resources.requests.memory }}
            cpu: {{ .Values.requestManagement.agentService.resources.requests.cpu }}
          limits:
            memory: {{ .Values.requestManagement.agentService.resources.limits.memory }}
            cpu: {{ .Values.requestManagement.agentService.resources.limits.cpu }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
{{- end }}
